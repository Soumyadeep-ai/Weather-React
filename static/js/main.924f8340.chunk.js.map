{"version":3,"sources":["data/weatherapi.js","App.js","reportWebVitals.js","index.js"],"names":["getWeatherData","cityname","a","axios","get","data","App","useState","weatherdata","setWeatherData","city","setCity","loading","setLoading","getData","console","log","message","useEffect","className","type","value","onChange","e","target","placeholder","onClick","css","size","color","src","weather","icon","alt","main","parseFloat","temp","toFixed","name","sys","country","temp_min","temp_max","humidity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAKaA,EAAc,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,+EAEDC,IAAMC,IALnB,kDAK8B,YAAQH,EAAR,kBAJ/B,qCAEe,uBAEfI,EAFe,EAEfA,KAFe,kBAGfA,GAHe,oGAAH,sD,eCsEZC,MAtEf,WACE,MAAsCC,mBAAS,MAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAwBF,mBAAS,SAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEMC,EAAO,uCAAG,4BAAAZ,EAAA,sEAEVW,GAAW,GAFD,SAGSb,EAAeU,GAHxB,OAGJL,EAHI,OAIVI,EAAeJ,GACfQ,GAAW,GALD,gDAOZE,QAAQC,IAAI,KAAMC,SAClBJ,GAAW,GARC,yDAAH,qDAmBb,OAHAK,qBAAU,WACRJ,MACC,IAED,qBAAKK,UAAU,MAAf,SACE,sBAAKA,UAAU,OAAf,UACE,qBAAIA,UAAU,QAAd,UAAsB,mBAAGA,UAAU,gBAAnC,iBACA,sBAAKA,UAAU,cAAf,UACE,uBAAOC,KAAK,OAAOC,MAAOX,EAAMY,SAAU,SAACC,GAAD,OAAOZ,EAAQY,EAAEC,OAAOH,QAAQI,YAAY,yBACtF,wBAAQL,KAAK,SAASM,QAAS,kBAAMZ,KAArC,uBAEDF,EACC,qBAAKO,UAAU,mBAAf,SACE,cAAC,cAAD,CACEQ,IAnBE,mEAoBFC,KAAM,IACNC,MAAQ,OACRjB,QAAUA,MAId,mCACiB,OAAhBJ,EACD,sBAAKW,UAAU,iBAAf,UACE,wDACA,qBAAKA,UAAU,eAAf,SACE,qBAAKW,IAAG,0CAAqCtB,EAAYuB,QAAQ,GAAGC,KAA5D,QAAwEC,IAAI,cAEtF,6BAAKzB,EAAYuB,QAAQ,GAAGG,OAC5B,qBAAKf,UAAU,aAAf,SACE,+BAAKgB,WAAW3B,EAAY0B,KAAKE,KAAO,QAAQC,QAAQ,GAAxD,aAEF,qBAAKlB,UAAU,WAAf,SACE,+BAAI,mBAAGA,UAAU,sBAAyBX,EAAY8B,KAAtD,MAA+D9B,EAAY+B,IAAIC,aAEjF,qBAAKrB,UAAU,mBAAf,SACE,uCAAUgB,WAAW3B,EAAY0B,KAAKO,SAAW,QAAQJ,QAAQ,GAAjE,iBACSF,WAAW3B,EAAY0B,KAAKQ,SAAW,QAAQL,QAAQ,GADhE,sBAEc7B,EAAY0B,KAAKS,SAF/B,YAKF,aCvDGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.924f8340.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst baseUrl = 'http://api.openweathermap.org/data/2.5/weather?';\r\nconst apiKey = '17d2ea70875dd30f1cd54355cda263b2';\r\n\r\nexport const getWeatherData = async (cityname) => {\r\n    try{\r\n        const {data} = await axios.get(baseUrl + `q=${cityname}&appid=${apiKey}`);\r\n        return data;\r\n    }catch(error) {\r\n        throw error;\r\n    }\r\n}","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport {getWeatherData} from './data/weatherapi';\nimport {ScaleLoader} from 'react-spinners';\n\nfunction App() {\n  const [weatherdata, setWeatherData] = useState(null);\n  const [city, setCity] = useState('Noida');\n  const [loading, setLoading] = useState(false);\n\n  const getData = async () => {\n    try{\n        setLoading(true);\n        const data = await getWeatherData(city);\n        setWeatherData(data);\n        setLoading(false);\n    }catch(error) {\n      console.log(error.message);\n      setLoading(false);\n    }\n  }\n  const override = `\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n  `;\n  useEffect(() => {\n    getData();\n  }, []);\n  return (\n    <div className=\"App\">\n      <div className=\"card\">\n        <h2 className=\"title\"><i className=\"fa fa-cloud\"></i>Weather App</h2>\n        <div className=\"search-form\">\n          <input type=\"text\" value={city} onChange={(e) => setCity(e.target.value)} placeholder=\"Enter your city name\"/>\n          <button type=\"button\" onClick={() => getData()}>Search</button>\n        </div>\n        {loading ? (\n          <div className=\"loader-container\">\n            <ScaleLoader\n              css={override}\n              size={200}\n              color= {\"#fff\"}\n              loading= {loading}\n              />\n          </div>\n        ) : (\n          <>\n          {weatherdata !== null ? (\n          <div className=\"main-container\">\n            <h4>Live Weather Condition</h4>\n            <div className=\"weather-icon\">\n              <img src={`http://openweathermap.org/img/w/${weatherdata.weather[0].icon}.png`} alt=\"imgicon\"/>\n            </div>\n            <h3>{weatherdata.weather[0].main}</h3>\n            <div className=\"temprature\">\n              <h1>{parseFloat(weatherdata.main.temp - 273.15).toFixed(1)}&deg;C</h1>\n            </div>\n            <div className=\"location\">\n              <h3><i className=\"fa fa-street-view\"></i>{weatherdata.name} | {weatherdata.sys.country}</h3>\n            </div>\n            <div className=\"temprature-range\">\n              <h6>Min: {parseFloat(weatherdata.main.temp_min - 273.15).toFixed(1)}&deg;C \n              || Max: {parseFloat(weatherdata.main.temp_max - 273.15).toFixed(1)}&deg;C \n              || Humidity: {weatherdata.main.humidity}%</h6>\n            </div>\n        </div>\n        ) : null}\n          </>\n        ) }       \n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}